
public class OpcodeMapper{
	public enum Opcode {
	    NOP(0x00, "nop", "No operation"),
	    ACONST_NULL(0x01, "aconst_null", "Push null reference onto the stack"),
	    ICONST_M1(0x02, "iconst_m1", "Load the int value -1 onto the stack"),
	    ICONST_0(0x03, "iconst_0", "Load the int value 0 onto the stack"),
	    ICONST_1(0x04, "iconst_1", "Load the int value 1 onto the stack"),
	    ICONST_2(0x05, "iconst_2", "Load the int value 2 onto the stack"),
	    ICONST_3(0x06, "iconst_3", "Load the int value 3 onto the stack"),
	    ICONST_4(0x07, "iconst_4", "Load the int value 4 onto the stack"),
	    ICONST_5(0x08, "iconst_5", "Load the int value 5 onto the stack"),
	    LCONST_0(0x09, "lconst_0", "Load the long value 0 onto the stack"),
	    LCONST_1(0x0A, "lconst_1", "Load the long value 1 onto the stack"),
	    FCONST_0(0x0B, "fconst_0", "Load the float value 0.0 onto the stack"),
	    FCONST_1(0x0C, "fconst_1", "Load the float value 1.0 onto the stack"),
	    FCONST_2(0x0D, "fconst_2", "Load the float value 2.0 onto the stack"),
	    DCONST_0(0x0E, "dconst_0", "Load the double value 0.0 onto the stack"),
	    DCONST_1(0x0F, "dconst_1", "Load the double value 1.0 onto the stack"),
	    BIPUSH(0x10, "bipush", "Push a byte onto the stack as an integer value"),
	    SIPUSH(0x11, "sipush", "Push a short onto the stack as an integer value"),
	    LDC(0x12, "ldc", "Push item from constant pool"),
	    LDC_W(0x13, "ldc_w", "Push item from constant pool (wide index)"),
	    LDC2_W(0x14, "ldc2_w", "Push long or double from constant pool (wide index)"),
	    ILOAD(0x15, "iload", "Load an int value from a local variable"),
	    LLOAD(0x16, "lload", "Load a long value from a local variable"),
	    FLOAD(0x17, "fload", "Load a float value from a local variable"),
	    DLOAD(0x18, "dload", "Load a double value from a local variable"),
	    ALOAD(0x19, "aload", "Load a reference from a local variable"),
	    ILOAD_0(0x1A, "iload_0", "Load int from local variable 0"),
	    ILOAD_1(0x1B, "iload_1", "Load int from local variable 1"),
	    ILOAD_2(0x1C, "iload_2", "Load int from local variable 2"),
    	ILOAD_3(0x1D, "iload_3", "Load int from local variable 3"),
    	LLOAD_0(0x1E, "lload_0", "Load long from local variable 0"),
    	LLOAD_1(0x1F, "lload_1", "Load long from local variable 1"),
    	LLOAD_2(0x20, "lload_2", "Load long from local variable 2"),
    	LLOAD_3(0x21, "lload_3", "Load long from local variable 3"),
    	FLOAD_0(0x22, "fload_0", "Load float from local variable 0"),
    	FLOAD_1(0x23, "fload_1", "Load float from local variable 1"),
    	FLOAD_2(0x24, "fload_2", "Load float from local variable 2"),
    	FLOAD_3(0x25, "fload_3", "Load float from local variable 3"),
    	DLOAD_0(0x26, "dload_0", "Load double from local variable 0"),
    	DLOAD_1(0x27, "dload_1", "Load double from local variable 1"),
    	DLOAD_2(0x28, "dload_2", "Load double from local variable 2"),
    	DLOAD_3(0x29, "dload_3", "Load double from local variable 3"),
    	ALOAD_0(0x2A, "aload_0", "Load reference from local variable 0"),
    	ALOAD_1(0x2B, "aload_1", "Load reference from local variable 1"),
    	ALOAD_2(0x2C, "aload_2", "Load reference from local variable 2"),
    	ALOAD_3(0x2D, "aload_3", "Load reference from local variable 3"),
    	IALOAD(0x2E, "iaload", "Load int from array"),
    	LALOAD(0x2F, "laload", "Load long from array"),
    	FALOAD(0x30, "faload", "Load float from array"),
    	DALOAD(0x31, "daload", "Load double from array"),
    	AALOAD(0x32, "aaload", "Load reference from array"),
    	BALOAD(0x33, "baload", "Load byte or boolean from array"),
    	CALOAD(0x34, "caload", "Load char from array"),
    	SALOAD(0x35, "saload", "Load short from array"),
    	ISTORE(0x36, "istore", "Store int value into local variable"),
    	LSTORE(0x37, "lstore", "Store long value into local variable"),
    	FSTORE(0x38, "fstore", "Store float value into local variable"),
    	DSTORE(0x39, "dstore", "Store double value into local variable"),
    	ASTORE(0x3A, "astore", "Store reference value into local variable"),
    	ISTORE_0(0x3B, "istore_0", "Store int into local variable 0"),
    	ISTORE_1(0x3C, "istore_1", "Store int into local variable 1"),
    	ISTORE_2(0x3D, "istore_2", "Store int into local variable 2"),
    	ISTORE_3(0x3E, "istore_3", "Store int into local variable 3"),
	   	LSTORE_0(0x3F, "lstore_0", "Store long into local variable 0"),
	    LSTORE_1(0x40, "lstore_1", "Store long into local variable 1"),
	    LSTORE_2(0x41, "lstore_2", "Store long into local variable 2"),
	    LSTORE_3(0x42, "lstore_3", "Store long into local variable 3"),
	    FSTORE_0(0x43, "fstore_0", "Store float into local variable 0"),
	    FSTORE_1(0x44, "fstore_1", "Store float into local variable 1"),
	    FSTORE_2(0x45, "fstore_2", "Store float into local variable 2"),
	    FSTORE_3(0x46, "fstore_3", "Store float into local variable 3"),
	    DSTORE_0(0x47, "dstore_0", "Store double into local variable 0"),
	    DSTORE_1(0x48, "dstore_1", "Store double into local variable 1"),
	    DSTORE_2(0x49, "dstore_2", "Store double into local variable 2"),
	    DSTORE_3(0x4A, "dstore_3", "Store double into local variable 3"),
	    ASTORE_0(0x4B, "astore_0", "Store reference into local variable 0"),
	    ASTORE_1(0x4C, "astore_1", "Store reference into local variable 1"),
	    ASTORE_2(0x4D, "astore_2", "Store reference into local variable 2"),
	    ASTORE_3(0x4E, "astore_3", "Store reference into local variable 3"),
	    IASTORE(0x4F, "iastore", "Store into int array"),
	    LASTORE(0x50, "lastore", "Store into long array"),
	    FASTORE(0x51, "fastore", "Store into float array"),
	    DASTORE(0x52, "dastore", "Store into double array"),
	    AASTORE(0x53, "aastore", "Store into reference array"),
	    BASTORE(0x54, "bastore", "Store into byte or boolean array"),
	    CASTORE(0x55, "castore", "Store into char array"),
	    SASTORE(0x56, "sastore", "Store into short array"),
	    POP(0x57, "pop", "Pop the top operand stack value"),
	    POP2(0x58, "pop2", "Pop the top one or two operand stack values"),
	    DUP(0x59, "dup", "Duplicate the top operand stack value"),
	    DUP_X1(0x5A, "dup_x1", "Duplicate the top operand stack value and insert two values down"),
	    DUP_X2(0x5B, "dup_x2", "Duplicate the top operand stack value and insert three values down"),
	    DUP2(0x5C, "dup2", "Duplicate the top one or two operand stack values"),
	    DUP2_X1(0x5D, "dup2_x1", "Duplicate the top one or two operand stack values and insert two or three values down"),
	    DUP2_X2(0x5E, "dup2_x2", "Duplicate the top one or two operand stack values and insert three or four values down"),
	    SWAP(0x5F, "swap", "Swap the top two operand stack values"),
	    IADD(0x60, "iadd", "Add int"),
	    LADD(0x61, "ladd", "Add long"),
	    FADD(0x62, "fadd", "Add float"),
	    DADD(0x63, "dadd", "Add double"),
	    ISUB(0x64, "isub", "Subtract int"),
	    LSUB(0x65, "lsub", "Subtract long"),
	    FSUB(0x66, "fsub", "Subtract float"),
	    DSUB(0x67, "dsub", "Subtract double"),
	    IMUL(0x68, "imul", "Multiply int"),
	    LMUL(0x69, "lmul", "Multiply long"),
	    FMUL(0x6A, "fmul", "Multiply float"),
	    DMUL(0x6B, "dmul", "Multiply double"),
	    IDIV(0x6C, "idiv", "Divide int"),
	    LDIV(0x6D, "ldiv", "Divide long"),
	    FDIV(0x6E, "fdiv", "Divide float"),
	    DDIV(0x6F, "ddiv", "Divide double"),
	    IREM(0x70, "irem", "Remainder int"),
	    LREM(0x71, "lrem", "Remainder long"),
	    FREM(0x72, "frem", "Remainder float"),
	    DREM(0x73, "drem", "Remainder double"),
	    INEG(0x74, "ineg", "Negate int"),
	    LNEG(0x75, "lneg", "Negate long"),
	   	FNEG(0x76, "fneg", "Negate float"),
	   	DNEG(0x77, "dneg", "Negate double"),
    	ISHL(0x78, "ishl", "Shift left int"),
    	LSHL(0x79, "lshl", "Shift left long"),
    	ISHR(0x7A, "ishr", "Arithmetic shift right int"),
    	LSHR(0x7B, "lshr", "Arithmetic shift right long"),
   	 	IUSHR(0x7C, "iushr", "Logical shift right int"),
    	LUSHR(0x7D, "lushr", "Logical shift right long"),
	    IAND(0x7E, "iand", "Perform bitwise and on int"),
	    LAND(0x7F, "land", "Perform bitwise and on long"),
	    IOR(0x80, "ior", "Perform bitwise or on int"),
	    LOR(0x81, "lor", "Perform bitwise or on long"),
	    IXOR(0x82, "ixor", "Perform bitwise xor on int"),
	    LXOR(0x83, "lxor", "Perform bitwise xor on long"),
	    IINC(0x84, "iinc", "Increment local variable by constant"),
	    I2L(0x85, "i2l", "Convert int to long"),
	    I2F(0x86, "i2f", "Convert int to float"),
	    I2D(0x87, "i2d", "Convert int to double"),
	    L2I(0x88, "l2i", "Convert long to int"),
	    L2F(0x89, "l2f", "Convert long to float"),
	    L2D(0x8A, "l2d", "Convert long to double"),
	    F2I(0x8B, "f2i", "Convert float to int"),
	    F2L(0x8C, "f2l", "Convert float to long"),
	    F2D(0x8D, "f2d", "Convert float to double"),
	    D2I(0x8E, "d2i", "Convert double to int"),
	    D2L(0x8F, "d2l", "Convert double to long"),
	    D2F(0x90, "d2f", "Convert double to float"),
	    I2B(0x91, "i2b", "Convert int to byte"),
	    I2C(0x92, "i2c", "Convert int to char"),
	    I2S(0x93, "i2s", "Convert int to short"),
	    LCMP(0x94, "lcmp", "Compare long"),
	    FCMPL(0x95, "fcmpl", "Compare float (less)"),
	    FCMPG(0x96, "fcmpg", "Compare float (greater)"),
	    DCMPL(0x97, "dcmpl", "Compare double (less)"),
	    DCMPG(0x98, "dcmpg", "Compare double (greater)"),
	    IFEQ(0x99, "ifeq", "Branch if int comparison with zero succeeds (equal)"),
	    IFNE(0x9A, "ifne", "Branch if int comparison with zero succeeds (not equal)"),
	    IFLT(0x9B, "iflt", "Branch if int comparison with zero succeeds (less)"),
	    IFGE(0x9C, "ifge", "Branch if int comparison with zero succeeds (greater or equal)"),
	    IFGT(0x9D, "ifgt", "Branch if int comparison with zero succeeds (greater)"),
	    IFLE(0x9E, "ifle", "Branch if int comparison with zero succeeds (less or equal)"),
	    IF_ICMPEQ(0x9F, "if_icmpeq", "Branch if int comparison succeeds (equal)"),
	    IF_ICMPNE(0xA0, "if_icmpne", "Branch if int comparison succeeds (not equal)"),
	    IF_ICMPLT(0xA1, "if_icmplt", "Branch if int comparison succeeds (less)"),
	    IF_ICMPGE(0xA2, "if_icmpge", "Branch if int comparison succeeds (greater or equal)"),
	    IF_ICMPGT(0xA3, "if_icmpgt", "Branch if int comparison succeeds (greater)"),
	    IF_ICMPLE(0xA4, "if_icmple", "Branch if int comparison succeeds (less or equal)"),
	    IF_ACMPEQ(0xA5, "if_acmpeq", "Branch if reference comparison succeeds (equal)"),
	    IF_ACMPNE(0xA6, "if_acmpne", "Branch if reference comparison succeeds (not equal)"),
	    GOTO(0xA7, "goto", "Branch unconditionally"),
	    JSR(0xA8, "jsr", "Jump to subroutine"),
	    RET(0xA9, "ret", "Return from subroutine"),
	    TABLESWITCH(0xAA, "tableswitch", "Access jump table by index and jump"),
	    LOOKUPSWITCH(0xAB, "lookupswitch", "Access jump table by key match and jump"),
	    IRETURN(0xAC, "ireturn", "Return int from method"),
	    LRETURN(0xAD, "lreturn", "Return long from method"),
	    FRETURN(0xAE, "freturn", "Return float from method"),
	    DRETURN(0xAF, "dreturn", "Return double from method"),
	    ARETURN(0xB0, "areturn", "Return reference from method"),
	    RETURN(0xB1, "return", "Return void from method"),
	    GETSTATIC(0xB2, "getstatic", "Get static field from class"),
	    PUTSTATIC(0xB3, "putstatic", "Set static field in class"),
	    GETFIELD(0xB4, "getfield", "Fetch field from object"),
	    PUTFIELD(0xB5, "putfield", "Set field in object"),
	    INVOKEVIRTUAL(0xB6, "invokevirtual", "Invoke instance method"),
	    INVOKESPECIAL(0xB7, "invokespecial", "Invoke instance method; special handling for superclass, private, and instance initialization method invocations"),
	    INVOKESTATIC(0xB8, "invokestatic", "Invoke a class (static) method"),
	    INVOKEINTERFACE(0xB9, "invokeinterface", "Invoke interface method"),
	    INVOKEDYNAMIC(0xBA, "invokedynamic", "Invoke dynamic method"),
	    NEW(0xBB, "new", "Create new object"),
	    NEWARRAY(0xBC, "newarray", "Create new array"),
	    ANEWARRAY(0xBD, "anewarray", "Create new array of reference"),
	    ARRAYLENGTH(0xBE, "arraylength", "Get length of array"),
	    ATHROW(0xBF, "athrow", "Throw exception or error"),
    	CHECKCAST(0xC0, "checkcast", "Check whether object is of given type"),
    	INSTANCEOF(0xC1, "instanceof", "Determine if object is of given type"),
    	MONITORENTER(0xC2, "monitorenter", "Enter monitor for object"),
    	MONITOREXIT(0xC3, "monitorexit", "Exit monitor for object"),
    	WIDE(0xC4, "wide", "Extend local variable index by additional bytes"),
    	MULTIANEWARRAY(0xC5, "multianewarray", "Create new multidimensional array"),
    	IFNULL(0xC6, "ifnull", "Branch if reference is null"),
    	IFNONNULL(0xC7, "ifnonnull", "Branch if reference is not null"),
    	GOTO_W(0xC8, "goto_w", "Branch unconditionally (wide index)"),
    	JSR_W(0xC9, "jsr_w", "Jump to subroutine (wide index)"),
    	BREAKPOINT(0xCA, "breakpoint", "Reserved for breakpoints in Java debuggers"),

    	// Opcodes 0xCB - 0xFD are reserved for future use and have no description.

    	IMPDEP1(0xFE, "impdep1", "Implementation-dependent operation 1"),
    	IMPDEP2(0xFF, "impdep2", "Implementation-dependent operation 2");

    	// Additional fields and methods for the enumeration class go here

    	private final int code;
        private final String mnemonic;
        private final String description;

        Opcode(int code, String mnemonic, String description) {
            this.code = code;
            this.mnemonic = mnemonic;
            this.description = description;
        }

        public int getCode() {
            return code;
        }

        public String getMnemonic() {
            return mnemonic;
        }

        public String getDescription() {
            return description;
        }
    }

    public static Map<Integer, String> createOpcodeDescriptionMap() {
        Map<Integer, String> opcodeDescriptionMap = new HashMap<>();
        for (Opcode opcode : Opcode.values()) {
            opcodeDescriptionMap.put(opcode.getCode(), opcode.getDescription());
        }
        return opcodeDescriptionMap;
    }

}

